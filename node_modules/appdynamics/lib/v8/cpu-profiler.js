/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';


var os = require('os');


function CpuProfiler(agent) {
  this.agent = agent;

  this.active = false;
  this.classRegex = undefined;
  this.appdRegex = undefined;
  this.onStopCallback = undefined;
}
exports.CpuProfiler = CpuProfiler;



CpuProfiler.prototype.init = function() {
  var self = this;

  self.classRegex = /^(.+)\.([^\.]+)$/;
  self.appdRegex = /\/appdynamics\//;
  self.agent.once('destroy', self.__makeOnAgentDestroy());
}

CpuProfiler.prototype.__makeOnAgentDestroy = function () {
  var self = this;
  return function () {
    if(!self.active) return;

    var callback = self.onStopCallback;

    try {
      self.stopCpuProfiler(1); // ignoring any output
      if (callback)
        callback("CPU profiling was aborted because of the destroy() call");
    }
    catch(err) {
      if (callback)
        callback(err);
    }
  };
}

CpuProfiler.prototype.startCpuProfiler = function(seconds, callback) {
  var self = this;

  if(!self.agent.appdNative) {
    return callback("V8 tools are not loaded.")
  }

  if(self.active) {
    return callback("CPU profiler is already active.");
  }

  self.active = true;
  self.onStopCallback = callback;

  self.agent.appdNative.startV8Profiler();
  self.agent.logger.log("V8 CPU profiler started");

  // stop v8 profiler automatically after the specified number of seconds
  self.agent.timers.setTimeout(function() {
    if(!self.active) return;

    try {
      callback(null, self.stopCpuProfiler(seconds));
    }
    catch(err) {
      callback(err);
    }
  }, seconds * 1000);
};

function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

CpuProfiler.prototype.stopCpuProfiler = function(seconds) {
  var self = this;

  if(!self.agent.appdNative || !self.active) return;

  var processCallGraph = {
    numOfRootElements: 1,
    callElements: []
  }

  var excludeAgentFromCallGraph = self.agent.opts.excludeAgentFromCallGraph;

  self.agent.appdNative.stopV8Profiler(
    function(childrenCount, samplesCount, functionName, scriptResourceName, lineNumber) {
      if(functionName === '(program)') {
        return true;
      }
      if (endsWith(scriptResourceName, "/proxy-funcs.js")) {
        return false;
      }
      if(excludeAgentFromCallGraph && self.appdRegex.exec(scriptResourceName)) {
        return true;
      }

      return false;
    },
    function(childrenCount, samplesCount, functionName, scriptResourceName, lineNumber) {
      var classMatch = self.classRegex.exec(functionName);
      var klass, method;
      if(classMatch && classMatch.length == 3) {
        klass = classMatch[1];
        method = classMatch[2];
      }
      else {
        klass = '(global)';
        method = functionName;
      }

      var callElement = {
        klass: klass,
        method: method,
        lineNumber: lineNumber,
        fileName: scriptResourceName,
        numChildren: childrenCount,
        samplesCount: samplesCount,
        type: 'JS'
      };

      processCallGraph.callElements.push(callElement);
  });


  self.agent.logger.log("V8 CPU profiler stopped");

  self.active = false;
  self.onStopCallback = undefined;

  return processCallGraph;
};

CpuProfiler.prototype.getHeapSnapshot = function(types, callback) {
  if (this.active) return callback('cpu-profiler-active');
  this.agent.appdNative.getV8HeapSnapshot(types, callback);
}
