/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';

var PERIOD = 60e3; // 60 seconds

function InstanceTracker(agent) {
    this.agent = agent;
    this.enabled = false;
    this.customTypes = [];
    this.intervalHandle = null;
    this.lastSnapshotTimestamp = 0;
}

exports.InstanceTracker = InstanceTracker;

InstanceTracker.prototype.init = function() {
    var self = this;

    self.agent.on('configUpdated', function() {
        var configManager = self.agent.configManager;
        var config = configManager.getConfigValue('instanceTrackingConfig');
        var isRunning;

        if (config) {
            isRunning = self.enabled;
            self.enabled = config.enabled;
            self.customTypes = config.customTypes || self.customTypes;

            if (config.enabled && !isRunning) {
                self.startInstanceTracking();
            } else if (!config.enabled && isRunning) {
                self.stopInstanceTracking();
            }
        }
    });
};

InstanceTracker.prototype.startInstanceTracking = function() {
    this.agent.logger.log('Object instance tracking enabled.');
    this.intervalHandle = this.agent.timers.setInterval(
        this.collectInstanceCounts.bind(this),
        PERIOD);
    this.collectInstanceCounts(); // don't wait on setInterval for first snapshot
};

InstanceTracker.prototype.stopInstanceTracking = function() {
    this.agent.logger.log('Object instance tracking disabled.');
    this.agent.timers.clearInterval(this.intervalHandle);
};

InstanceTracker.prototype.collectInstanceCounts = function() {
    var self = this;

    if (Date.now() - self.lastSnapshotTimestamp < PERIOD/2) {
        self.agent.logger.log('Skipping instance tracking snapshot (throttled)');
        return;
    }

    self.agent.logger.log('Taking instance tracking snapshot');
    self.agent.cpuProfiler.getHeapSnapshot(self.customTypes, function(err, json) {
        if (err) {
            self.agent.logger.log('Skipping instance tracking snapshot: ' + err);
            return;
        }

        try {
            var instanceCounts = JSON.parse(json);
            self.agent.proxyTransport.sendInstanceData(instanceCounts);
            self.agent.logger.log('Completed instance tracking snapshot');
        } catch (e) {
            self.agent.logger.error('Failed to collect instance tracking data: ' +
                e + '\n' + json);
        }

        self.lastSnapshotTimestamp = Date.now();
    });
};
