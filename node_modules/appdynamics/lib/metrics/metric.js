/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';

/*
 * Metric object used for aggregating values and trasfering
 * the aggregated metric to data sender. It can have three states:
 * - created/resetted
 * - initialized, i.e. accumulating values
 * - aggregated
 */


function Metric(scope, name, unit, op) {
  this.scope = scope;
  this.name = name;
  this.unit = unit;
  this.op = op || 'avg';

  // used for avg aggregation only
  this._count = undefined;

  this.reset();

  // dynamic value property to support live metrics
  Object.defineProperty(this, 'value', {
    enumerable: true,
    get: function() {
      return (typeof(this._value) == 'function'
                ? this._value()
                : this._value);
    }
  });
}

exports.Metric = Metric;


Metric.prototype.reset = function() {
  var self = this;

  if (typeof(self._value) != 'function') {
    self._value = 0;
  }

  if(self.op === 'avg') {
    self._count = 0;
  } else {
    self._count = undefined;
  }
};


Metric.prototype.addValue = function(value) {
  var self = this;

  if(typeof(value) != 'number' && typeof(value) == 'function' && self.op != 'set') return;

  switch(self.op) {
  case 'avg':
    self._value = (value + self._value * self._count) / ++self._count;
    break;
  case 'sum':
  case 'inc':
    self._value += value;
    break;
  case 'set':
    self._value = value;
    break;
  }
};


Metric.prototype.clone = function() {
  var cln = new Metric(
    this.scope,
    this.name,
    this.unit,
    this.op
  );

  cln._value = this._value;

  if(this.op === 'avg') {
    cln._count = this._count;
  }

  return cln;
};




