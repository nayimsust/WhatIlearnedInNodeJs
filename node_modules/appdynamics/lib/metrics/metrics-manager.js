/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';

var os = require('os');
var Metric = require('./metric').Metric;
var EventLoopMetrics = require('./eventloop').EventLoopMetrics;

/*
 * MetricsManager managemes metric lifecycle, i.e. keeps list
 * and map of metrics, aggregates and emits every minute, etc.
 * It also emits all possible metris once on agent start, to make sure
 * the server gets something to start with.
 */

function MetricsManager(agent) {
  this.agent = agent;
  this.metrics = null;
  this.metricMap = null;
  this.eventloopMetrics = null;
}
exports.MetricsManager = MetricsManager;


MetricsManager.STRING_REGEX = /^[a-zA-Z0-9 \_\-\+\'\/\.\:\?\[\]\(\)]{1,128}$/;


MetricsManager.prototype.init = function() {
  this.metrics = [];
  this.metricMap = {};
  this.timestamp = Date.now();
  this.eventloopMetrics = new EventLoopMetrics(this.agent);
  this.eventloopMetrics.init();
};


MetricsManager.prototype.createMetric = function(scope, name, unit, op) {
  var self = this;

  if(this.metrics.length == 5000) {
    self.agent.logger.message('too many metrics, ignoring metric');
    return new Metric(scope, name, unit, op); // dummy metric
  }

  if(
    !scope || typeof(scope) !== 'string' || !MetricsManager.STRING_REGEX.exec(scope) ||
    !name || typeof(name) !== 'string' || !MetricsManager.STRING_REGEX.exec(name)
  ) {
    self.agent.logger.message('metric parameter(s) missing or invalid, ignoring metric');
    return new Metric(scope, name, unit, op); // dummy metric
  }

  var metric = new Metric(scope, name, unit, op);
  self.metrics.push(metric);
  self.metricMap[scope + '/' + name] = metric;

  return metric;
}


MetricsManager.prototype.findMetric = function(scope, name) {
  return this.metricMap[scope + '/' + name];
}



MetricsManager.prototype.findOrCreateMetric = function(scope, name, unit, op) {
  var metric = this.findMetric(scope, name);
  if(!metric) {
    metric = this.createMetric(scope, name, unit, op);
  }

  return metric;
}


MetricsManager.prototype.addMetric = function(scope, name, value, unit, op) {
  var metric = this.findOrCreateMetric(scope, name, unit, op);

  metric.addValue(value);

  return metric;
}


MetricsManager.prototype.getProcessMetrics = function(scale) {
  var self = this, now = Date.now(), metrics;

  function sampleMetric(scope, name) {
    var value = 0, metric = self.findMetric(scope, name), now;

    if (metric) {
      value = metric.value;
      metric.reset();

      if (scale) {
        value  = value / ((now - self.timestamp) * 1000);
      }
    }

    return Math.round(value);
  }

  metrics = {
    cpuUsage:                     sampleMetric('Process', 'CPU usage'),
    heapSize:                     sampleMetric('Process', 'V8 heap used'),
    nodeRss:                      sampleMetric('Process', 'Node RSS'),
    numOfFullGCs:                 sampleMetric('Garbage Collection', 'Full GCs per minute'),
    numOfIncGCs:                  sampleMetric('Garbage Collection', 'Incremental GCs per minute'),
    heapSizeChange:               sampleMetric('Garbage Collection', 'Used heap size change per minute'),
    diskIOKBReadPerSec:           sampleMetric('Disk', 'Data read per sec'),
    diskIOKBWrittenPerSec:        sampleMetric('Disk', 'Data written per sec'),
    netwIOKBReadPerSec:           sampleMetric('Network', 'Data received per minute'),
    netwIOKBWrittenPerSec:        sampleMetric('Network', 'Data sent per minute'),
    socketIOConnections:          sampleMetric('Socket.io', 'Socket count'),
    socketIOConnectionsTotal:     sampleMetric('Socket.io', 'Total socket count'),
    socketIOMessagesSent:         sampleMetric('Socket.io', 'Messages sent per minute'),
    socketIOMessagesReceived:     sampleMetric('Socket.io', 'Messages received per minute'),
    socketIOSentMessagesSize:     sampleMetric('Socket.io', 'Sent message size'),
    socketIOReceivedMessagesSize: sampleMetric('Socket.io', 'Received message size'),
    eventLoopTickCount:           sampleMetric('Event Loop', 'Event Loop Ticks'),
    eventLoopMinTickLength:       sampleMetric('Event Loop', 'Minimum Event Loop Tick Length'),
    eventLoopMaxTickLength:       sampleMetric('Event Loop', 'Maximum Event Loop Tick Length'),
    eventLoopAvgTickLength:       sampleMetric('Event Loop', 'Average Event Loop Tick Length'),
    eventLoopAvgIOTime:           sampleMetric('Event Loop', 'Average Event Loop IO Time'),
    httpIncomingConnectionCount:  sampleMetric('HTTP', 'Incoming Connection Count'),
    httpOutgoingConnectionCount:  sampleMetric('HTTP', 'Outgoing Connection Count')
  };

  // explicitly reset natively managed event loop info
  self.eventloopMetrics.reset();

  self.timestamp = now;
  return metrics;
}
