/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';

var util = require('util');


function Logger(agent) {
  this.agent = agent;
  this.capturedOutMessages = undefined;
  this.capturedErrMessages = undefined;
}
exports.Logger = Logger;


Logger.prototype.init = function(debug) {
  this.debug = debug;
};

Logger.prototype.startCapture = function() {
  this.capturedOutMessages = [];
  this.capturedErrMessages = [];
}

Logger.prototype.getCapturedMessage = function () {
  var ret = {
    'out' : this.capturedOutMessages,
    'err' : this.capturedErrMessages
  };
  return ret;
}

Logger.prototype.stopCapture = function() {
  var ret = this.getCapturedMessage();
  this.capturedErrMessages = undefined;
  this.capturedOutMessages = undefined;
  return ret;
}

Logger.prototype.dumpCapture = function () {
  if (this.capturedErrMessages)
    console.error(JSON.stringify(this.capturedErrMessages, null, "  "));
  if (this.capturedOutMessages)
    console.error(JSON.stringify(this.capturedOutMessages, null, "  "));
}


Logger.prototype.log = function(msg) {
  if(this.debug && msg) console.log('appdynamics v' + this.agent.version + ' (' + currentTime() + '):', msg);
  if (this.capturedOutMessages)
    this.capturedOutMessages.push({ 'msg' : msg, 't' : currentTime()});
};


Logger.prototype.error = function(err) {
  if(this.debug && err) console.error('appdynamics v' + this.agent.version + ' (' + currentTime() + '): ERROR:', err.stack ? err.stack : err);
  if (this.capturedErrMessages)
    this.capturedErrMessages.push({ 'err' : err && err.stack || err, 't' : currentTime()});
};


Logger.prototype.dump = function(obj) {
  if(this.debug) console.log(util.inspect(obj, false, 10, true));
};


Logger.prototype.message = function(msg) {
  util.log("\u001b[1;31mAppDynamics:\u001b[0m " + msg);
};


function currentTime() {
	var d = new Date();

  return (
  		pad(d.getDate(), 2) + '-' +
  		pad(d.getMonth(), 2) + '-' +
    	d.getFullYear() + ' ' +
    	pad(d.getHours(), 2) + ':' +
    	pad(d.getMinutes(), 2) + ':' +
    	pad(d.getSeconds(), 2) + '.' +
      pad(d.getMilliseconds(), 3));
}

function pad(n, width) {
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n
}
