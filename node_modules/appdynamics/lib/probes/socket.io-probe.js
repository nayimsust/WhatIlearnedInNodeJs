/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';


function SocketioProbe(agent) {
  this.agent = agent;

  this.packages = ['socket.io'];
  this.attached = false;
}
exports.SocketioProbe = SocketioProbe;



SocketioProbe.prototype.attach = function(obj) {
  var self = this;

  if(obj.__appdynamicsProbeAttached__) return;
  obj.__appdynamicsProbeAttached__ = true;

  var proxy = self.agent.proxy;
  var profiler = self.agent.profiler;

  var connectCount;
  var totalConnectCount;

  var metricsManager = self.agent.metricsManager;
  var connectCountMetric = metricsManager.addMetric('Socket.io', 'Socket count',
    function() { return connectCount; }, 'count', 'set');
  var totalConnectCountMetric = metricsManager.addMetric('Socket.io', 'Total socket count',
    function() { return totalConnectCount; }, 'count', 'set');
  var sentCountMetric = metricsManager.createMetric('Socket.io', 'Messages sent per minute',
    'count', 'sum');
  var receivedCountMetric = metricsManager.createMetric('Socket.io', 'Messages received per minute',
    'count', 'sum');
  var sentSizeMetric = metricsManager.createMetric('Socket.io', 'Sent message size',
    'Characters', 'avg');
  var receivedSizeMetric = metricsManager.createMetric('Socket.io', 'Received message size',
    'Characters', 'avg');

  proxy.after(obj.prototype, ['listen','attach'], function(obj, args, ret) {
    if(!ret.sockets) return;

    if(connectCount === undefined) {
      connectCount = totalConnectCount = 0;
    }

    proxy.before(ret.sockets, ['on', 'addListener'], function(obj, args) {
      if(args[0] !== 'connection') return;

      proxy.callback(args, -1, function(obj, args) {
        if(!args[0]) return;

        var socket = args[0];

        // conenctions
        connectCount++;
        totalConnectCount++;
        socket.on('disconnect', function() {
          connectCount--;
        });

        // sent messages
        proxy.before(socket, ['emit', 'send'], function(obj, args) {
          // ignore internal events
          if(args[0] === 'newListener') return;

          try {
            sentCountMetric.addValue(1);
            sentSizeMetric.addValue(typeof(args[0]) == 'string' ?
              args[0].length : JSON.stringify(args[0]).length);
          } catch (e) {
            // ignored; unable to serialize socket.io message
          }
        });

        // received messages
        proxy.before(socket, ['on', 'addListener'], function(obj, args) {
          // ignore internal events
          if(args[0] === 'disconnect') return;

          try {
            receivedCountMetric.addValue(1);
            receivedSizeMetric.addValue(typeof(args[0]) == 'string' ?
              args[0].length : JSON.stringify(args[0]).length);
            } catch (e) {
              // ignored; unable to serialize socket.io message
            }
        });
      });
    });
  });
};
