/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';


function IoredisProbe(agent) {
  this.agent = agent;

  this.packages = ['ioredis'];
}
exports.IoredisProbe = IoredisProbe;



IoredisProbe.prototype.attach = function(obj) {
  var self = this;

  if(obj.__nodetimeProbeAttached__) return;
  obj.__nodetimeProbeAttached__ = true;

  var logger = self.agent.logger;
  var proxy = self.agent.proxy;
  var profiler = self.agent.profiler;


  var clusters = {};

  proxy.before(obj.Cluster.prototype, "sendCommand", function(obj, args) {
    var serverPool = [];
    if(Array.isArray(obj.startupNodes)) {
      obj.startupNodes.forEach(function(node) {
        var address = node.host + ':' + node.port;
        serverPool.push(address);
        clusters[address] = serverPool;
      });
    }
  });


  proxy.before(obj.prototype, "sendCommand", function(obj, args) {
    var redis = obj;
    var command = args[0];
    var time = profiler.time();
    var commandName = command.name;
    var commandArgs = command.args;
    var address = redis.options.host + ':' + redis.options.port;

    var serverPool = clusters[address];
    if(serverPool) {
      address = serverPool.join('\n');
    }

    var supportedProperties = {
      'SERVER POOL': address,
      'VENDOR': 'REDIS'
    };

    var backendConfig = self.agent.backendConfig.getCacheConfig(supportedProperties);
    // if there's no backend config (OOTB or custom), then ignore this exit call
    if (!backendConfig) {
      return;
    }

    var props = self.agent.backendConfig.populateCacheProperties(backendConfig, supportedProperties);

    var exitCall = profiler.createExitCall(time, {
      exitType: 'EXIT_CACHE',
      backendName: 'Redis',
      backendConfig: backendConfig,
      identifyingProperties: props,
      command: commandName,
      commandArgs: profiler.truncate(commandArgs),
      stackTrace: profiler.stackTrace()
    });

    if(command.callback && typeof(command.callback) === 'function') {
      proxy.before(command, 'callback', function(obj, args) {
        if(!time.done()) return;

        if(exitCall) {
          var error = proxy.getErrorObject(args);
          profiler.addExitCall(time, exitCall, error);
        }
      });

      proxy.before(command.promise, '_promise0', function(obj, args) {
        if(!time.done()) return;

        if(exitCall) {
          var error = proxy.getErrorObject(args);
          profiler.addExitCall(time, exitCall, error);
        }
      });
    }
    else if(exitCall) {
      if(time.done()) {
        profiler.addExitCall(time, exitCall);
      }
    }
  });
};
