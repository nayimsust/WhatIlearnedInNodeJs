/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
*/
'use strict';


function MysqlProbe(agent) {
  this.agent = agent;

  this.packages = ['mysql'];
}
exports.MysqlProbe = MysqlProbe;



MysqlProbe.prototype.attach = function(obj) {
  var self = this;

  if(obj.__appdynamicsProbeAttached__) return;
  obj.__appdynamicsProbeAttached__ = true;

  var proxy = self.agent.proxy;
  var profiler = self.agent.profiler;
  var type = 'MySQL';

  ['createClient', 'createConnection'].forEach(function(createCmd) {
    proxy.after(obj, createCmd, function(obj, args, ret) {
      var client = ret;
      var config = (createCmd === 'createClient' ? client : client.config);
      if (!config) {
        return;
      }

      var props;
      var supportedProperties = {
        'HOST': config.host,
        'PORT': config.port,
        'DATABASE': config.database,
        'VERSION': undefined,
        'VENDOR': 'MYSQL'
      };

      proxy.before(client, 'query', function(obj, args) {
        var command = args.length > 0 ? args[0] : undefined;
        var params = args.length > 1 && Array.isArray(args[1]) ? args[1] : undefined;
        var time = profiler.time();
        var trace = profiler.stackTrace();

        var hasCallback = proxy.callback(args, -1, function(obj, args) {
          if (!time.done()) {
            return;
          }

          if (!props) {
            if (obj._connection._protocol._handshakeInitializationPacket) {
              supportedProperties.VERSION = obj._connection._protocol._handshakeInitializationPacket.serverVersion;
            }
            props = populateProperties(self.agent, supportedProperties);
            if (!props) {
              return;
            }
          }

          var exitCall = profiler.createExitCall(time, {
            exitType: 'EXIT_DB',
            backendName: 'MySQL',
            backendConfig: props.config,
            identifyingProperties: props.props,
            command: profiler.truncate(command),
            commandArgs: profiler.truncate(params),
            user: config.user,
            stackTrace: trace,
            isSql: true
          });

          if (!exitCall) {
            return;
          }

          var error = proxy.getErrorObject(args);
          profiler.addExitCall(time, exitCall, error);
        });
      });
    });
  });
};

function populateProperties(agent, supportedProperties) {
  var backendConfig = agent.backendConfig.getDbConfig(supportedProperties);
  // if there's no backend config (OOTB or custom), then ignore this exit call
  if (!backendConfig) {
    return undefined;
  }

  var properties = agent.backendConfig.populateDbProperties(backendConfig,
                                                            supportedProperties);

  return {
    config: backendConfig,
    props: properties
  };
}
