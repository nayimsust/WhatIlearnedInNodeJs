var http = require('http');

var PERIOD = 10 * 1000; // every 10 seconds

function AnalyticsReporter(agent) {
    this.agent = agent;
    this.enabled = false;
    this.analyticsHost = 'localhost';
    this.analyticsPort = 9090;
}

exports.AnalyticsReporter = AnalyticsReporter;

AnalyticsReporter.prototype.init = function() {
    var config = this.agent.opts && this.agent.opts.analytics;
    this.analyticsHost = config && config.host || this.analyticsHost;
    this.analyticsPort = config && config.port || this.analyticsPort;

    this.enabled = false;
    this.initialized = false;
    this.agent.on('configUpdated', this.configUpdated.bind(this));
    this.configUpdated();
};

AnalyticsReporter.prototype.initNative = function() {
    var self = this;
    var agentIdentity = this.agent.configManager.getConfig().agentIdentity;
    if (agentIdentity) {
        this.agent.logger.log('Initializing Analytics');

        this.agent.appdNative.initAnalytics({
            'applicationName': this.agent.opts.applicationName,
            'tierName': this.agent.opts.tierName,
            'nodeName': this.agent.opts.nodeName,
            'applicationId': agentIdentity.appID,
            'tierId': agentIdentity.tierID,
            'nodeId': agentIdentity.nodeID
        }, function httpCallback(json) {
            var req = http.request({
                appdIgnore: true,
                host: self.analyticsHost,
                port: self.analyticsPort,
                path: '/v1/sinks/bt',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            req.on('response', function(res) {
                self.agent.logger.log('analytics response: '+res.statusCode);
            });

            req.on('error', function(err) {
                self.agent.logger.error('analytics reporting error: ' + err.message);
            });

            self.agent.logger.log('sending analytics events:\n' + json);
            req.write(json);
            req.end();
        });
    }
};

AnalyticsReporter.prototype.configUpdated = function() {
    var config = this.agent.configManager.getConfig();
    var analyticsConfig = config && config.analyticsConfig || {};

    var wasEnabled = this.enabled;
    this.enabled = !!analyticsConfig.isEnabled;
    this.enabledBTIDs = analyticsConfig.analyticsBTIDs || [];

    if (this.enabled) {
        if (!this.initialized) {
            this.initNative();
        }

        if (!wasEnabled) {
            // changed state from disabled to enabled; install monitors
            this.agent.appdNative.enableAnalytics(this.enabled);

            this._transactionHandler = this.addTransaction.bind(this);
            this.agent.on('transaction', this._transactionHandler);
            this._reportInterval = this.agent.timers.setInterval(
                this.reportAnalytics.bind(this), PERIOD);
        }
    } else if (wasEnabled) {
        // changed state from enabled to disabled; remove monitors
        this.agent.appdNative.enableAnalytics(this.enabled);

        if (this._transactionHandler) {
            this.agent.removeListener('transaction', this._transactionHandler);
        }
        this.agent.timers.clearInterval(this._reportInterval);
        this._transactionHandler = null;
        this._reportInterval = null;
    }
};

AnalyticsReporter.prototype.addTransaction = function(txn) {
    if (!this.enabled) return;
    if (txn.ignore) return;
    if (!txn.registrationId) return;
    if (this.enabledBTIDs.indexOf(''+txn.registrationId) < 0) return;

    var httpData = txn.httpRequestAnalyticsData;
    this.agent.logger.log('analytics transaction added: ' + txn.name);
    this.agent.appdNative.recordTransaction({
        "eventTimestamp": (new Date()).toISOString(),

        "requestGUID": txn.guid,
        "transactionId": txn.registrationId,
        "transactionName": txn.name,
        "transactionTime": txn.ms,
        "clientRequestGUID": txn.eumGuid,

        "requestExperience": getUserExperience(txn),
        "entryPoint": !txn.corrHeader,

        exitCalls: (txn.exitCalls || []).map(function(call) {
            return {
              exitCallType: call.exitType,
              avgResponseTimeMillis: call.ms / call.count,
              numberOfErrors: call.error ? 1 : 0,
              numberOfCalls: call.count
            };
        }),

        "httpData": {
            "cookies": httpData && httpData.cookies,
            "headers": httpData && httpData.headers,
            "parameters": httpData && httpData.httpParams,
            "url": txn.url,

            // Not supported for Node:
            //
            // "principal": "No User Principal",
            // "sessionId": null,
            // "sessionObjects": {},
            // "uriPathSegments": {}
        },

        "userData": txn.api && txn.api.analyticsData
    });
};

AnalyticsReporter.prototype.reportAnalytics = function() {
    if (!this.enabled) return;
    this.agent.logger.log('polling analytics reporter');
    this.agent.appdNative.reportTransactions();
};

function getUserExperience(txn) {
    if (txn.hasErrors) {
        return "ERROR";
    }
    if (txn.btInfoResponse && txn.btInfoResponse.currentVerySlowThreshold > 0 &&
            txn.btInfoResponse.currentVerySlowThreshold < txn.ms) {
        return "VERY_SLOW";
    }
    if (txn.btInfoResponse && txn.btInfoResponse.currentSlowThreshold > 0 &&
            txn.btInfoResponse.currentSlowThreshold < txn.ms) {
        return "SLOW";
    }
    return "NORMAL";
}
